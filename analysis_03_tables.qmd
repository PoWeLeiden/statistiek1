# Tabellen {#sec-analysis-tables}

```{r setup, include=FALSE}
library(openintro)  # We use data from this package
library(tidyverse)  # This loads ggplot2, which produces the graphs
library(expss)
library(flextable)
library(huxtable)
```

## Frequentietabellen

Een frequentietabel toont het aantal keren dat een waarde voorkomt in de data. We hebben al kennis gemaakt met de functie `table`, die een eenvoudige tabel met tellingen oplevert. Om een uitgebreidere frequentietabel te maken die ook percentages bevat, gebruiken we package `expss`. Ons voorbeeld gebruikt gegevens uit package `openintro`. We laden eerst de packages:

```{r}
#| eval: false
library(expss)
library(openintro)
```

We laden daarna de dataset `loan50` die deel uitmaakt van het package `openintro` met behulp van de functie `data`.

```{r}
data(loan50)
```

::: callout-note
Onthoud dat we de functie `data` alleen kunnen gebruiken voor datasets die bij een package horen. Voor het laden van datasets vanuit een bestand zie @sec-data-basics-gegevens-laden.
:::

Nu maken we maken een frequentietabel met de functie `fre`:

```{r}
fre(loan50$homeownership)
```

`fre`

:   Dit is de functie om een **fre**quentietabel te maken met behulp van het `expss` package

`loan50$homeownership`

:   We specificeren de gebruikte dataset en variabele met behulp van de dollartekennotatie, d.w.z. de naam van het dataframe vóór het dollarteken en de naam van de variabele na het dollarteken.

::: callout-tip
## Rapportage

Voor een frequentietabel is het meestal voldoende om de aantallen en geldige percentages te rapporteren. Dit wordt bereikt door de eerste drie kolommen van een **fre**quentietabel te selecteren en ontbrekende waarden te verwijderen.

```{r}
fre(loan50$homeownership)[,1:3] |> drop_na()
```

::: {.callout-tip collapse="true"}
## Rapportage voor gevorderden

Als je het helemaal netjes wil doen, zonder de tabel nog handmatig te bewerken, kun je onderstaande code gebruiken en aanpassen.

```{r}
loan50 |>                                            # Start met je data frame
  pull(homeownership) |>                             # Selecteer de juiste variabele
  set_var_lab("Homeownership") |>                    # Geef deze een nette naam
  fre(stat_lab = c("Frequentie", "Percentage")) |>   # Gebruik Nederlandse labels
  _[,1:3] |>                                         # Selecteer kolom 1 t/m 3
  drop_na()                                          # Laat lege rijen weg
```
:::
:::

## Kruistabellen

Een kruistabel (*contingency table* of *cross table*) geeft een samenvatting van gegevens voor twee categoriale variabelen. Hieronder staat een kruistabel van twee variabelen: het geslacht van een respondent en of de respondent rookt.

![](figures/overview_r_functions_week2_000.png)

### Twee lay-outs van een kruistabel

De bovenstaande tabel toont de waargenomen frequenties. Dit is niet de manier waarop kruistabel moeten worden gepresenteerd. In plaats daarvan zijn er twee manieren die worden gebruikt en die beide voor deze cursus kunnen worden gebruikt.

#### Lay-out 1

In de eerste lay-out worden alleen de percentages per categorie van de variabele in de rijen, behalve de totaalrij onderaan, getoond. Je berekent de percentages per kolom door het aantal waargenomen frequenties te delen door het totale aantal waarnemingen in die kolom. In de laatste kolom toon je ook de percentages.

![](figures/overview_r_functions_week2_001.png)

Toegepast op bovenstaande gegevens (geslacht van de respondent en roken) zou de kruistabel er als volgt uitzien:

![](figures/overview_r_functions_week2_001a.png)

#### Lay-out 2

In de tweede lay-out worden naast de percentages per categorie van de variabele in de rijen ook de waargenomen frequenties getoond. Ook hier deel je voor de percentages de waargenomen frequenties door het totale aantal waarnemingen in elke kolom. In de kolom "rijtotalen" worden echter alleen de waargenomen frequenties getoond.

![](figures/overview_r_functions_week2_002.png)

Toegepast op bovenstaande gegevens zou de kruistabel er als volgt uitzien:

![](figures/overview_r_functions_week2_002a.png)

Vanzelfsprekend mogen de engelstalige termen 'Frequency', 'Column %', 'Row totals' en 'Column totals' ook vervangen worden door een Nederlandstalig equivalent (Frequentie, Kolompercentage, Rijtotaal, Kolomtotaal).

::: callout-tip
## Rapportage: aanwijzingen

-   Gebruik een eenvoudige lay-out met een beperkt aantal (horizontale) lijnen. Verticale lijnen zijn niet nodig. De hierboven gebruikte standaard is acceptabel, maar ook een variant met slechts drie lijnen (boven, onder de titelrij en onder) is prima.

-   Zet de onafhankelijke variabele in de kolommen en de afhankelijke variabele in de rijen. Dit is een conventie (de statistiek verandert op zich niet als je het omdraait); het is voor je lezers makkelijker als je daaraan voldoet.

-   Percenteer variabelen over de kolommen. Elke kolom moet optellen tot 100%.

-   Omdat we weten dat de totalen van de kolommen 100% zijn, vermeld je daar de aantallen (in de laatste rij). Op die manier kan de lezer de aantallen van elke cel desgewenst terugrekenen. Het is ook acceptabel om zowel kolompercentages als aantallen in elke cel te vermelden (layout 1).

-   Doorgaans kan worden afgerond op gehele getallen of één decimaal.

-   Zet een titel boven de tabel. Begin de titel met ‘Tabel’ en het nummer van de tabel.

-   Onderaan de tabel kan desgewenst de bron worden vermeld.

-   Bij de interpretatie van de tabel worden de percentages over de rijen vergeleken, bijvoorbeeld: van de mannen rookte 56%, terwijl van de vrouwen 46% rookte.
:::

### Kruistabellen in R

Eenvoudige tabellen kunnen worden gemaakt met `table()`, maar om kolompercentages en totalen toe te voegen en de mogelijkheid te bieden om te exporteren naar Word/HTML, gebruiken we het package `flextable`:

```{r}
#| eval: false
library(flextable) 
```

```{r}

data(loans_full_schema)
table_example <- proc_freq(x = loans_full_schema, 
                           row = "application_type", 
                           col = "homeownership", 
                           include.row_percent = FALSE, 
                           include.table_percent = FALSE) 
table_example
```

`table_example <- proc_freq(….)`

:   We maken een tabel genaamd `table_example` met de functie `proc_freq`.

`x = loans_full_schema`

:   Dit specificeert welke dataset (data.frame) we willen gebruiken.

`row = "application_type"`

:   Dit specificeert de variabele die we willen gebruiken in de rijen van de kruistabel.

`col = "homeownership"`

:   Dit specificeert de variabele die we willen gebruiken in de kolommen van de kruistabel.

`include.row_percent = FALSE`

:   Hiermee geven we aan dat we de rijpercentages niet willen opnemen. Kolompercentages worden standaard wel opgenomen.

`include.table_percent = FALSE`

:   Dit geeft aan dat we geen tabelpercentages willen opnemen.

Met de volgende code kun je dit opslaan in een Word bestand (`save_as_docx`) en een HTML bestand (`save_as_html`). Merk op dat dit bestand wordt opgeslagen in de huidige werkdirectory (*working directory*).

```{r eval=FALSE, include=TRUE}
save_as_docx(table_example, path = "table_example.docx")
save_as_html(table_example, path = "table_example.html")
```

`table_example`

:   Dit specificeert welke tabel we willen exporteren.

`path = "table_example.docx"`

:   Dit specificeert de bestandsnaam voor het te exporteren bestand.

Merk op dat deze tabel nog enige (handmatige) bewerking vereist als je alleen de percentages in de cellen wilt opnemen (zie lay-out 1). Vergeet ook niet om een titel voor de tabel op te nemen.

<!-- **Table 1: Example of a cross table** -->

<!-- |                      |                | Homeownership |         |          | Total | -->

<!-- |------------|------------|------------|------------|------------|------------| -->

<!-- |                      |                | **Mortgage**  | **Own** | **Rent** |       | -->

<!-- | **Application Type** | **Individual** | 80%           | 86%     | 91%      | 85%   | -->

<!-- |                      | **Joint**      | 20%           | 14%     | 9%       | 15%   | -->

<!-- | **Total (N)**        |                | 4789          | 1353    | 3858     | 10000 | -->

### Kruistabellen in R met expss

Een alternatieve oplossing vereist iets langere R-code, maar levert een tabel op die niet verder bewerkt hoeft te worden voor lay-out optie 1. Deze oplossing gebruikt de pakketten `expss` en `huxtable`:

```{r}
#| eval: false
library(huxtable)
library(expss)

```

```{r results="asis"}
data(loans_full_schema)

cross_table <- loans_full_schema |>
  tab_cells(`Application type`= application_type) |>
  tab_cols(`Home ownership`= homeownership, total(homeownership)) |>
  tab_total_label("Total") |>
  tab_stat_cpct() |>
  tab_pivot() |>
  drop_empty_rows() |>
  drop_empty_columns() |>
  as_huxtable() |>
  theme_article() |>
  set_number_format(row=everywhere,col=everywhere,value= "%.0f %%" ) |>
  set_number_format(row=final(1),col=everywhere,value=0)

cross_table
```

`cross_table = loans_full_schema`

:   Dit definieert dat we een tabel genaamd `cross_table` maken met de dataset `loans_full_schema`. Wanneer je een eigen tabel maakt, zou je deze natuurlijk hernoemen naar de naam van je eigen dataset.

`` tab_cells(`Application type`= application_type) ``

:   Hiermee geven we aan dat we de variabele `application_type` willen gebruiken in de rijen. We geven ook aan dat we deze variabele willen weergeven als Application type, met behulp van ˝ Application type\` \`\` (let op het gebruik van de zogenoemde *backtick* (˝) ).

`` tab_cols(`Home ownership`= homeownership, total(homeownership)) ``

:   Dit specificeert dat we de variabele `homeownership` willen gebruiken in de kolommen en ook een Totaal kolom willen opnemen (met het totaal van geldige waarden op de variabele homeownership). We specificeren ook dat we willen dat de variabele wordt weergegeven als `Home ownership`.

`tab_total_label("Total")`

:   We willen graag dat het totaallabel wordt weergegeven als `Total`.

`tab_stat_cpct()`

:   We willen dat de tabel kolompercentages bevat.

`tab_pivot()`

:   Deze functie creëert de tabel.

`drop_empty_rows()`

:   Verwijder alle lege rijen uit de tabel

`drop_empty_columns()`

:   Verwijder alle lege kolommen uit de tabel

`as_huxtable()`

:   Dit transformeert deze tabel in een tabel waar het `huxtable` pakket mee kan werken, wat verdere wijziging en export van de tabel mogelijk maakt.

`theme_article()`

:   Geef de tabel een thema dat hem geschikt maakt voor publicatie in een wetenschappelijk tijdschrift.

`set_number_format(row=everywhere,col=everywhere,value= "%.0f %%" )`

:   Rond percentages af op 0 decimalen en voeg het percentagesymbool toe.

`set_number_format(row=final(1),col=everywhere,value=0)`

:   Rond de totaaltelling in de laatste rij af op 0 decimalen.

> **Note: je hoeft alleen de eerste drie regels van deze code te veranderen om hem te gebruiken voor je eigen data: de naam van de data set en de variabelen.**

Deze tabel kan op de volgende manier worden opgeslagen in een Word document (`quick_docx`) en/of HTML bestand (`quick_html`):

```{r eval=FALSE, include=TRUE}
quick_docx(cross_table,
           file = "cross_table.docx")
quick_html(cross_table,
           file = "cross_table.html")

```

`cross_table`

:   Dit specificeert welke tabel we willen exporteren.

`file = "cross_table.docx"`

:   Dit specificeert de bestandsnaam voor het te exporteren bestand.
