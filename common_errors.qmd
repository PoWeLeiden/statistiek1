# Veelgemaakte fouten in R

```{r setup, include=FALSE}
knitr::opts_chunk$set(
	echo = TRUE,
	message = FALSE,
	warning = FALSE
)

library(openintro)  # We use data from this package
library(tidyverse)  # This loads ggplot2, which produces the graphs
library(rio)
```


::: {.callout-note}
Dit document wordt regelmatig bijgewerkt op basis van feedback van studenten uit zowel Leiden als Den Haag, en is daarom vooralsnog alleen in het Engels beschikbaar.
:::


```{r eval=FALSE}
# Load required packages
library(openintro)
library(tidyverse)
library(rio)
```



This overview documents some of the most common errors made in writing R code. If you are unsure where to look, try to search this document for any error message you get (using CRTL/CMD + F).

## Top-5 errors

1.  [Function not found]

2.  [The difference between = and ==](#the-difference-between-and)

3.  [File not found / No such file](#file-not-found-no-such-file)

4.  [Upper and lower case]

5.  [Using \|\> instead of + in a ggplot](#using-instead-of-in-a-ggplot)

## Syntax errors

### Upper and lower case

R is case sensitive, which means that upper and lower case are not interchangeable:

```{r, error=TRUE}
x <- c(1,2,3,4,5)
Mean(x)  # Won't work, because the function mean starts with a lower case m
```

Fix by using the correct case:

```{r}
x <- c(1,2,3,4,5)
mean(x)
```

Variable names are also case-sensitive:

```{r error=TRUE}
MyVariable = "Hello"
print(myvariable)  # Object not found, because we're using lower case here
```

Fix by using the correct case:

```{r}
print(MyVariable)
```

### Incomplete code

A very common error by users is to not close a bracket. R needs 'complete statements' and if you execute 'incomplete' code with Enter/Return, R will not know where the command ends.

```{r, eval=FALSE}
# In this example a bracket is missing in the end and R will therefore assume the code is incomplete and wait
((4+5)/(6 + 3) * 2
```

If you run this code, you will not get an error message but R will simply 'wait' for the rest and indicate this with a `+` sign. For example, in the example above, you will see the following output in the console:

```{r, eval=FALSE}
> ((4+5)/(6 + 3) * 2
+
```

In this case you can either write the missing part, i.e. the closing bracket, in the console (the window below) and click Enter/Return or, alternatively, click in the console and use the 'Escape' button (which will reset the console). You can then enter new (complete) code.

### Annotation errors

If you place code that you want R to execute behind an annotation, it will not run:

```{r, error=TRUE}
# I am annotating this: x <- c(1,2,3,4)
```

Fix:

```{r}
# I am annotating this
x <- c(1,2,3,4)
```

The same is true for annotation in a pipe:

```{r, error = TRUE}
x <- c(1,2,3,4)
x |>
  mean() # annotation hello |>
  sqrt()
```

Fix:

```{r}
x <- c(1,2,3,4)
x |>
  mean() |> # annotation hello 
  sqrt()
```

### Forgetting quotation marks around a character vector

Remember that text (*character vectors*, also called *strings*) requires quotation marks around it:

```{r, error = TRUE}
my_text <- Hello, this won't work
```

We normally use double quotation marks (`"`), but single quotation marks will also work (`'`):

```{r}
my_text <- "Hello, this works"
my_text2 <- 'Hello, this also works'
```

### Too many or too few brackets or quotation marks

Every bracket (`(`) and every quotation mark (`"`) needs to be closed (once):

```{r, error=TRUE}
x <- c(1,2,3,4
```

```{r, error = TRUE}
y <- "Hello
```

```{r, error=TRUE}
x <- c(1,2,3,4))
```

```{r, error = TRUE}
y <- "Hello""
```

```{r, error = TRUE}
z <- "You cannot put a "string" inside a string"
```

If you get unexpected symbol errors, it is often for this reason.

If you have a text with a double quotation mark in it, put `\` before it (this is called 'escaping', so R means that you mean to write a quotation mark and not announce the end of the character variable):

```{r}
my_text <- "Is it \"normal\" to like R?"
cat(my_text)
```

### The difference between = and == {#the-difference-between-and}

People often confuse `=` and `==`:

```{r error = TRUE}
data("starwars")
starwars |>
  mutate(height_inch == height / 2.54)

```

Here we used two equal signs where one should be used. R thinks we are trying to make a comparison with `height_inch` (and throws an error, because it doesn't exist) when we are trying to create a new variable called `height_inch`.

```{r, error=TRUE}
data("starwars")
starwars |>
  filter(height = 150)
```

Here we used a single equal sign, where we should have put two. In this case R recognizes the potential error and suggests that we need to two equal signs. Thanks R!

**Remember:**

-   One equal sign (`=`) is used to assign a variable, for example in `mutate`:

    ```{r eval = FALSE}
    dta |>
      mutate(new_variable = old_variable + 10)
    ```

-   Two equal signs (`==`) are used when comparing or conditioning, for example in `filter` or `case_when`:

    ```{r eval = FALSE}
    dta |>
      filter(height == 200)
    ```

## Package errors

### Function not found

```{r error=TRUE}
Phi(data$econ, data$oecd)
```

We try to run a function, but R says it could not find it.

-   Have you loaded the package that contains this function? In this example: `library(DescTools)`

-   Did you spell the function name correctly, including the use of upper and lower case?

-   Is this a custom function that is part of your code? You need to select and run the code that defines the function before referencing this function.

### Conflicting functions

If you load multiple packages which have functions with the same name, this can lead to conflicts. Usually, the last package loaded 'masks' functions with the same name from previously loaded packages. R will warn you about this when loading the packages, but you may not always be aware and as a result the wrong function is used.

```{r error=TRUE, warning=TRUE}
# Load tidyverse first, then expss
library(tidyverse)
library(expss)

# Create an example data frame with one variable 'test'
dta <- tibble(test = letters[1:5]) 

# Try to call recode (from dplyr), but this is masked by recode from expss
dta |>
  mutate(test2 = recode(test, "a" = "b"))

```

There are various ways to address this problem:

1.  Load the packages in the correct order, i.e. the last package is the one that you need any conflicting functions from:

```{r eval=FALSE}
library(expss)
library(tidyverse)
```

2.  Use `packagename::function` instead of just the function name:

```{r}
# We specify that we want to use recode from dplyr by writing dplyr::recode
dta |>
  mutate(test2 = dplyr::recode(test, "a" = "b"))
```

3.  Detach a package you no longer need, for example:

```{r error=TRUE}
detach("package:expss", unload = TRUE)

# Now there is no more conflict
dta |>
  mutate(test2 = recode(test, "a" = "b"))
```

## File errors

### File not found / No such file {#file-not-found-no-such-file}

If R cannot find a file you are trying to open:

```{r error=TRUE}
import("file.csv")
```

-   Check for typos and use of UPPER and lower case.

-   Did you include the correct file extension (e.g. `.csv`, `.sav`, `.por`)?

-   Does the file indeed exist and is it located in the project folder (or working directory)? Type `dir()` in the Console to list the files in the current working directory. Using `getwd()` you can get the current working directory and this can be changed by `setwd()`. But the best practice is to work in an R project (a folder on your computer) where all your files are located (see week 1).

-   Perhaps the file is in a sub-folder? For example, if the file is located in a folder called data, try `import("data/file.csv").`

## Data preparation and transformation errors

### Forgetting to use mutate inside case_when

When using `case_when()`, we must create a new variable in our recoding procedure with `mutate()`. Otherwise R will not know where to put the new, recoded data.

```{r, include=TRUE, error= TRUE}
library(openintro) # This is where the data is from
gpa_study_hours <- gpa_study_hours |>
  case_when(
          gpa >= 3.7 ~ "A",
          gpa >= 3.3 ~ "B",
          gpa >= 1.7 ~ "C",
          gpa >= 1.3 ~ "D",
          gpa < 1.3 ~ "F")
```

The solution is to put the `case_when` statement inside `mutate()`:

```{r}
library(openintro) # This is where the data is from
gpa_study_hours <- gpa_study_hours |>
  mutate(grade = case_when(
    gpa >= 3.7 ~ "A",
    gpa >= 3.3 ~ "B",
    gpa >= 1.7 ~ "C",
    gpa >= 1.3 ~ "D",
    gpa < 1.3 ~ "F"))

```

### Not assigning the result

If you perform any operation that aims to modify data in your dataset (for example filter, select, mutate, etc.), you need to assign the result. Otherwise R will just print out your modifications but not save them in memory:

```{r}
example_data <- data.frame(x = c(1,2,3,4,5))
example_data |>
  mutate(y = x * 2)
```

R has printed out the result, but not saved it in example_data:

```{r}
print(example_data) # No 'y', because we did not assign the result
```

If you want to save the result, assign it to an object:

```{r}
example_data <- example_data |>
  mutate(y = x * 2)
example_data # Now 'y' has been stored in 'example_data'
```

### Overwriting data

If you mutate a variable and save it to a variable with the same name, the original data is lost:

```{r}
example_data <- data.frame(x = c(1,2,3,4,5))
example_data

example_data <- example_data |>
  mutate(x = x + 10)
example_data
```

### Missing data recoding using `na_if`: loss of generality

If you make a mistake in correctly spelling the value of a factor variable, when using the function `na_if`, you will get a 'loss of generality' error:

```{r error=TRUE, warning=TRUE}
example_data <- data.frame(drink = as.factor(c("Tea", "Coffee", "Coffee", "Milk")))

# Suppose we would like to mark 'Coffee' as missing values, and we write
example_data |> 
  mutate(drink = na_if(drink, "Koffee")) # Note the spelling error in Coffee

```

In more simple language: R cannot find a level 'Koffee' in the factor variable `drink` and this produces an error. If we correct the spelling error, this should work:

```{r}
example_data |> 
  mutate(drink = na_if(drink, "Coffee")) # This should work and produce missing values for the 2nd and 3rd row
```

## ggplot2 errors

### An empty graph

-   Have you included a `geom` layer?

-   Have you put a plus sign between the layers of the ggplot? (see below)

-   Have you inadvertently used the pipe instead of the plus sign to connect layers?

### Forgetting the plus sign at the end of the line

If you do not include the plus sign at the end of the line, the next part of the graph is not seen as part of the current graph.

```{r, error=TRUE}
library(openintro)
data(loan50)
ggplot(data = loan50,
       mapping = aes(x = interest_rate)) 
geom_histogram()
```

Fix by adding the `+` sign at the end of the line:

```{r, error=TRUE}
library(openintro)
data(loan50)
ggplot(data = loan50,
       mapping = aes(x = interest_rate)) +
  geom_histogram()
```

### Using \|\> instead of + in a ggplot {#using-instead-of-in-a-ggplot}

Perhaps confusingly you should use the `+` sign to add layers to a ggplot, not the pipe `|>` (or `%>%`). This throws an error:

```{r, error=TRUE}
library(openintro)
data(loan50)
ggplot(data = loan50,
       mapping = aes(x = interest_rate)) |>
  geom_histogram()
```

Fix by replacing the pipe by a plus sign:

```{r, error=TRUE}
library(openintro)
data(loan50)
ggplot(data = loan50,
       mapping = aes(x = interest_rate)) +
  geom_histogram()
```

### Forgetting `aes()`

Note that if you want to assign variables to an aesthetic (an axis, colour, shape, etc.) you need to use `aes()`. This won't work:

```{r, error=TRUE}
library(openintro)
data(loan50)
ggplot(data = loan50,
       x = interest_rate) +
  geom_histogram()
```

Fix by including `aes()`:

```{r}
library(openintro)
data(loan50)
ggplot(data = loan50,
       aes(x = interest_rate)) +
  geom_histogram()
```

Forgetting aes() can also lead to 'object not found' errors, for example, when we forget to include `aes()` in the `geom_point` function:

```{r error=TRUE}
library(openintro)
data(loan50)
ggplot(data = loan50, 
       mapping = aes(x = total_income, y = loan_amount)) +
  geom_point(colour = homeownership)
```

R will interpret the above as setting the colour of all points to `homeownership` . It will look for an object called `homeownership` , which does not exist. You need to tell R that you are trying to map the colour of the points to the variable homeownership from the data frame you are using. Do that by putting `aes()` around `colour = homeownership`:

```{r error=TRUE}
library(openintro)
data(loan50)
ggplot(data = loan50, 
       mapping = aes(x = total_income, y = loan_amount)) +
  geom_point(aes(colour = homeownership))
```

### Colours do not match

If you are trying to set a fixed colour for a graph element, for example grey points in a scatterplot, you should **not** include `aes()` .

```{r error=TRUE}
library(openintro)
data(loan50)
ggplot(data = loan50, 
       mapping = aes(x = total_income, y = loan_amount)) +
  geom_point(aes(colour = "grey"))
```

Instead of grey dots we get red dots! Why? Because we have told R to link the colour of the dots to a variable (or constant, really) "grey". Think of it as adding a new variable to the dataset which has the same value for each case. R matches the first default colour (red) to use for all cases in the group (which are all cases in the graph).

Fix by removing `aes()`:

```{r error=TRUE}
library(openintro)
data(loan50)
ggplot(data = loan50, 
       mapping = aes(x = total_income, y = loan_amount)) +
  geom_point(colour = "grey")
```

Remember: use `aes()` when you want to link an element of the graph to a variable in your data. If you want to just change a fixed colour, border, etc. do not use `aes()`.

## Errors in using statistical functions

### Forgetting table() when using prop.test

When using prop.test for data in a data frame, you need to include `table()` around the arguments. This will not work:

```{r, error = TRUE}
# We are using variable am from mtcars which indicates if a car has automatic (0) or manual (1) transmission
prop.test(mtcars$am)
```

We can fix this by putting `table()` around the variable(s):

```{r}
# We are using variable am from mtcars which indicates if a car has automatic (0) or manual (1) transmission
prop.test(table(mtcars$am))
```
