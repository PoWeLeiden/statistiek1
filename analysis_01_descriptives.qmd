# Centrum- en spreidingsmaten {#sec-analysis-descriptives}

In dit hoofdstuk bespreken we hoe je in R centrum- en spreidingsmaten voor variabelen met diverse meetniveaus kunt berekenen.

## Centrummaten

De meest gebruikte centrummaten zijn het gemiddelde, de mediaan en de modus. Om te tonen hoe we ze berekenen met R, zullen we de volgende drie variabelen gebruiken:

```{r eval=TRUE, include=TRUE}
directions <- factor(c("East", "West", "East", "North", "North", "East", "West", "West", "West", "East", "North"))
temperature <- factor(c("low", "high", "medium", "high", "low", "medium", "high"), levels = c("low", "medium", "high"), ordered = TRUE)
exam_points <- c(2, 7, 3, 4, 2, 0)
```

Als we deze variabelen vervolgens printen, zien we dat de inhoud correct is opgeslagen:

```{r}
directions # nominaal
temperature # ordinaal
exam_points # interval/ratio
```


### Modus

De modus is de waarde die het vaakst voorkomt in een verzameling gegevens. We kunnen eerst de verdeling van de waarden bekijken met de `table()` functie:

```{r eval=FALSE, include=TRUE}
table(directions)
```

Op basis hiervan kunnen we zien dat er twee modi zijn (Oost en West).

```{r eval=FALSE, include=TRUE}
directions
 East North  West 
    4     3     4
```

Als we de modus willen berekenen, kunnen we gebruik maken van een pakket met de naam [DescTools](https://www.rdocumentation.org/packages/DescTools/versions/0.99.19). Dit is een verzameling van diverse statistische basisfuncties voor het efficiënt beschrijven van gegevens. Het pakket bevat de functie `Mode()` (let op de hoofdletter M).

We installeren en laden het benodigde *package* as volgt:

```{r eval=FALSE, include=TRUE}
install.packages("DescTools") # DescTools package installeren (hoeft slechts één keer)
library(DescTools) # DescTools package laden
```

```{r echo=FALSE}
library(DescTools)
```

Om de modus te berekenen, schrijven we:

```{r}
Mode(directions, na.rm = TRUE)
```

`na.rm = TRUE`

:   Dit zorgt ervoor dat eventuele missende waarden worden genegeerd bij de berekening van de modus.

Uit de resultaten blijkt dat er twee modi zijn: `East` en `West`.

### Mediaan

De mediaan is de waarde die, in de veronderstelling dat de dataset van klein naar groot is geordend, in het midden valt. Om deze te berekenen, gebruiken we het `Mediaan()` commando uit het [DescTools](https://www.rdocumentation.org/packages/DescTools/versions/0.99.19) package (zie hierboven voor het installeren en laden van dit package). De functie `Median` uit package `DescTools` kan omgaan met factors:

```{r}
Median(temperature, na.rm=TRUE)
```

`na.rm = TRUE`

:   Dit zorgt ervoor dat eventuele missende waarden worden genegeerd bij de berekening van de mediaan.

### Gemiddelde

Het gemiddelde van een verzameling waarnemingen wordt berekend door alle waarden bij elkaar op te tellen en dan te delen door het totaal aantal waarden[^3]:

[^3]: We kunnen het gemiddelde ook berekenen door de som te berekenen en dan te delen door het aantal observaties:

    ```{r}
    sum(exam_points) / length(exam_points)
    ```

```{r}
mean(exam_points, na.rm=TRUE)
```

`na.rm = TRUE`

:   Dit zorgt ervoor dat eventuele missende waarden worden genegeerd bij de berekening van het gemiddelde.

## Spreidingsmaten

Om de minimum- en maximumwaarde van een vector of een kolom in een data frame te vinden, kunnen we de functies `max()` en `min()` gebruiken. Toegepast op de ordinale en interval/ratio variabele die we hebben gemaakt:

```{r, include=TRUE}
min(temperature, na.rm = TRUE)
max(exam_points, na.rm = TRUE)
```

`na.rm = TRUE`

:   Dit zorgt ervoor dat eventuele missende waarden worden genegeerd bij de berekening van het minimum of maximum.

### Spreidingsbreedte

`range()` geeft een vector terug die het minimum en maximum bevat:

```{r, include=TRUE}
range(exam_points, na.rm = TRUE)
```

`exam_points`

:   Dit is de naam van de variabele/vector waarvan we de range willen berekenen. Vervang door je eigen variabelen indien je werkt met je eigen data.

`na.rm = TRUE`

:   Dit zorgt ervoor dat eventuele missende waarden worden genegeerd.

### Interkwartielafstand

Om een overzicht te krijgen van de interkwartielafstand, kunnen we de `summary()` functie gebruiken:

```{r, include=TRUE}
summary(exam_points)
```

In de resultaten zien we `1st Qu.` (= 1st quartile, 1e kwartiel) en `3rd Qu.` (= 3rd quartile, 3e kwartiel),

### Standaardafwijking en variantie

Je kunt de standaardafwijking in R berekenen met de `sd()` functie. Standaard genereert deze de steekproef-standaardafwijking. Als je de standaardafwijking van de populatie wilt berekenen, kun je een aanpassing maken (vermenigvuldigen met sqrt((n-1)/n)).

```{r, include=TRUE}
sd(exam_points, na.rm = TRUE)
```

`na.rm = TRUE`

:   Dit zorgt ervoor dat eventuele missende waarden worden genegeerd.

Om de variantie te berekenen, kunnen we de `var()` functie gebruiken:

```{r, include=TRUE}
var(exam_points, na.rm = TRUE)
```

`na.rm = TRUE`

:   Dit zorgt ervoor dat eventuele missende waarden worden genegeerd.

## Bewerkingen doen in dataframes

Zoals uitgelegd in @sec-data-basics-dollar-operator, gebruik je het symbool "\$" om variabelen in dataframes aan te roepen. Daarom, als we een van de functies willen gebruiken die tot nu toe zijn behandeld (`mean()`, `table()`, `sd()`, `var()`, enz.) gebruik je gewoon die operator om specifieke variabelen in data frames te gebruiken.

**Voorbeeld:** als we het gemiddelde en de standaardafwijking van filmscores ('Score') in 'deniro_data' willen berekenen, zouden we schrijven:

```{r}
#| echo: true
#| eval: false
library(rio)  # Laad package rio voor het importeren van de data met functie 'import'
deniro_data <- import(file = "deniro.csv") 
```

```{r}
#| echo: false
#| eval: true
library(rio)  # Laad package rio voor het importeren van de data met functie 'import'
deniro_data <- import(file = "data/deniro.csv") 
```

```{r, include=TRUE}

mean(deniro_data$Score, na.rm = TRUE)
sd(deniro_data$Score, na.rm = TRUE)
```

`na.rm = TRUE`

:   Dit zorgt ervoor dat eventuele missende waarden worden genegeerd.

## Beschrijvende statistieken voor een volledig dataframe

Er zijn veel samenvattende statistieken beschikbaar in R. Een eenvoudige manier om een basisoverzicht van een dataframe te krijgen is de `describe()` functie uit het ['psych' pakket](https://www.rdocumentation.org/packages/psych/versions/1.0-17/topics/describe). Als je dit package moet installeren type je `install.packages("psych")` in de R console (niet nodig op universiteits-pc's).

Om de [`describe()`](https://www.rdocumentation.org/packages/psych/versions/1.0-17/topics/describe) functie uit het \`psych' pakket te gebruiken, schrijven we:

```{r, include=TRUE}
library(psych)
describe(deniro_data, na.rm = TRUE, skew = FALSE, ranges = TRUE)
```

`na.rm = TRUE`

:   We voegen `na.rm = TRUE` toe om R te vertellen ontbrekende waarden weg te laten.

`skew = FALSE`

:   Via dit deel van de code, vertellen we R of het de scheefheid van de variabele moet berekenen. Ik zou aanraden om het weg te laten, maar als je het toch wilt toevoegen, verander het dan in `skew = TRUE`.

`ranges = TRUE`

:   We voegen `ranges = TRUE` toe om R te vertellen de spreidingsbreedte (*range*) te berekenen. Als je dit niet wilt, kun je het instellen op `ranges = FALSE`

Zoals je kunt zien, levert dit een relatief eenvoudige overzichtstabel op. Let wel op: de variabele `Title` is een `character` variabele (dat is te zien aan de asterisk \*). Psych maakt hier eerst een numerieke variabele van.

