# Data combineren {#sec-data-merging-data}

In dit hoofdstuk bespreken we manieren om aan een bestaande dataset nieuwe rijen of kolommen toe te voegen en om twee bestaande datasets samen te voegen.

```{r setup, include=FALSE}
knitr::opts_chunk$set(
	echo = TRUE,
	message = FALSE,
	warning = FALSE
)

library(tidyverse)
library(rio)

canada <- import(here::here("data/2019 Canadian Election Study.rds"))
```

We gebruiken in dit hoofdstuk de volgende packages:

```{r}
library(tidyverse)
library(rio)
```

En als voorbeelddata de Canadian Election Study van 2019:

```{r, eval=FALSE}
canada <- import("2019 Canadian Election Study.rds")
```

## Datasets combineren: rijen of kolommen toevoegen

### Rijen toevoegen

Als we twee datasets hebben met dezelfde kolommen (variabelen), kunnen we de rijen van de twee datasets samenvoegen met `bind_rows` uit package `dplyr` (dit package wordt geladen met de tidyverse).

Als voorbeeld hebben we twee datasets met dezelfde variabelen, `name` en `age`:

```{r}
dta1 <- data.frame(name = c("Billy", "Xin", "Hugo"), age = c(20, 30, 40))
dta2 <- data.frame(name = c("Theresa", "Elin", "Lena"), age = c(25, 35, 45))

dta1 
dta2
```

Wij kunnen deze datasets als volgt combineren:

```{r}
dta_combined <- bind_rows(dta1, dta2)
dta_combined
```

### Kolommen toevoegen

Als we extra kolommen willen toevoegen aan een dataframe, kunnen we `bind_cols` uit package `dplyr` gebruiken (dit package wordt geladen met de tidyverse).

Als we bijvoorbeeld twee datasets hebben, één met de naam en leeftijd van mensen, en een andere met hun zelfgerapporteerde geslacht:

```{r}
dta <- data.frame(name = c("Billy", "Xin", "Hugo"), age = c(20, 30, 40))
gender <- data.frame(gender = c("Non-binary", "Female", "Male"))
```

```{r}
dta
gender
```

We kunnen dit combineren met `bind_cols`:

```{r}
bind_cols(dta, gender)
```

::: {.callout-warning}
### Belangrijk
`bind_cols` zal matchen op positie, dus de volgorde van rijen moet precies hetzelfde zijn. Voor meer flexibele manieren om kolommen aan een dataset toe te voegen, zie "Datasets samenvoegen" hieronder.
:::

## Datasets samenvoegen (`join`)

Als we twee datasets hebben met een gemeenschappelijke variabele (d.w.z. een variabele met dezelfde naam en vergelijkbare codering, bijvoorbeeld een landnaam of een unieke identificatiecode), kunnen we de datasets combineren met `join` van `dplyr`.

Laten we beginnen met wat voorbeeldgegevens over 4 landen:

```{r}
country_dta1 <- data.frame(country = c("USA", "Germany", "Netherlands", "Kenya"),
                           population = c(332, 84, 18, 56))

country_dta2 <- data.frame(country = c("Netherlands", "Germany", "Kenya", "Argentina"),
                          official_name = c("Nederland", "Bundesrepublik Deutschland", "Republic of Kenya", "República Argentina"))

country_dta1
country_dta2
```

Merk op dat slechts drie landen voorkomen in beide datasets, maar de variabele `country` is aanwezig in beide dataframes en de waarden (d.w.z. de spelling van de namen van de landen) zijn hetzelfde voor de drie landen die in beide datasets voorkomen.

We kunnen de gegevens in deze datasets als volgt samenvoegen, met behulp van zogenaamde 'joins' van pacakge `dplyr`. De functie `full_join` geeft alle rijen in beide datasets terug:

```{r}
joined_data <- full_join(x = country_dta1, 
                         y = country_dta2, 
                         by = c("country"))
```

`x = country_dta1`

:   Dit specificeert de eerste van de twee datasets. Vervang door je eigen dataset als je met je eigen gegevens werkt.

`y = country_dta2`

:   Dit specificeert de tweede van de twee datasets.

`by = c("country")`

:   Dit specificeert de kolom waarop we de waarden van de twee dataframes willen matchen (gespecificeerd als een character vector, d.w.z. tussen dubbele haakjes). In ons voorbeeld gebruiken we de variabele `country`, omdat deze variabele vergelijkbaar is tussen onze twee datasets.

```{r}
joined_data
```

We zien dat alle vijf landen aanwezig zijn in de samengevoegde dataset. De VS ontbreekt in `country_dta2`, dus er ontbreekt een waarde (`NA`) voor `official_name` in de gecombineerde dataset. Argentinië ontbreekt in `country_dta1` en heeft dus een ontbrekende waarde voor `population` in de gecombineerde dataset.

Er zijn vier soorten `joins`:

| Functie        | Gecombineerde dataset omvat...   |
|----------------|----------------------------------|
| `inner_join()` | ... alle rijen in `x` *en* `y`.  |
| `left_join()`  | ... alle rijen in `x`.           |
| `right_join()` | ... alle rijen in `y`.           |
| `full_join()`  | ... alle rijen in `x` *of* `y`.  |

We kunnen het resultaat zien als we de vier soorten joins uitvoeren en printen:

```{r}
# Inner join: alleen de drie landen die in beide datasets voorkomen
inner_join(x = country_dta1, y = country_dta2, by = c("country"))

# Left join: alleen de vier landen in de eerste dataset
left_join(x = country_dta1, y = country_dta2, by = c("country"))

# Right join: alleen de vier landen in de tweede dataset
right_join(x = country_dta1, y = country_dta2, by = c("country"))

# Full join: alle vijf de landen
full_join(x = country_dta1, y = country_dta2, by = c("country"))
```

### Joining met verschillende variabelen

Als we twee dataframes hebben met verschillende namen, moeten we R instrueren welke variabelen moeten worden vergeleken.

Stel bijvoorbeeld dat we een derde dataframe hebben met landeninformatie:

```{r}
country_dta3 <- data.frame(country_name = c("USA", "Netherlands", "Germany"),
                           capital_city = c("Washington DC", "Amsterdam", "Berlin"))
country_dta3
```

We merken op dat de variabele met de naam van het land in dit dataframe `country_name` heet. Om deze te combineren met `country_dta1`, moeten we `by` als volgt specificeren:

```{r}
full_join(x = country_dta1, y = country_dta3, 
          by = c("country" = "country_name"))
```

`by = c("country" = "country_name")`

:   De syntaxis `"country" = "country_name"` betekent dat we variabele `country` uit de eerste dataset vergelijken met variabele `country_name` uit de tweede dataset.

Merk op dat deze oplossing alleen werkt als de landennamen identiek gespeld zijn (en alleen de naam van de variabele verschilt). Het onderstaande zal niet goed werken, omdat de landennamen niet vergelijkbaar zijn tussen de twee datasets:

```{r}
country_dta4 <- data.frame(country = c("United States of America", "Deutschland", "Nederland"),
                           capital_city = c("Washington DC", "Berlin", "Amsterdam"))

country_dta4

full_join(country_dta1, country_dta4)

```

In dergelijke gevallen is de oplossing om eerst de variabele die wordt gebruikt voor de matching te hercoderen:

```{r}
country_dta4_recoded <- country_dta4 |>
  mutate(country = recode(country, 
                          "United States of America" = "USA",
                          "Deutschland" = "Germany",
                          "Nederland" = "Netherlands"))
```

De landennamen uit beide datasets komen nu overeen, en we kunnen ze dus samenvoegen:

```{r}
full_join(country_dta1, country_dta4_recoded)
```


