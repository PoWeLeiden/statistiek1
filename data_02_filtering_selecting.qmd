# Filteren, selecteren en hernoemen {#sec-data-filtering-selecting}

```{r setup, include=FALSE}
knitr::opts_chunk$set(
	echo = TRUE,
	message = FALSE,
	warning = FALSE
)

# Create data for venn diagrams
set.seed(5)
data <- list(A = sample(1:6, 2),
             B = sample(1:6, 2))

library(rio)
canada <- import(here::here("data/2019 Canadian Election Study.rds"))
deniro_data <- import("data/deniro.csv") 
```

In dit hoofdstuk introduceren we een aantal belangrijke technieken die je zullen helpen bij het werken met bestaande datasets en het opzetten van je eigen datasets. Het gaat erom hoe je specifieke kolommen/variabelen selecteert, hoe je casussen filtert en hoe je variabelen hernoemt.

We zullen ze illustreren aan de hand van verschillende datasets. Eén ervan is het bestand 'deniro.csv' (beschikbaar [hier](https://people.sc.fsu.edu/~jburkardt/data/csv/deniro.csv)) dat Rotten Tomato beoordelingen van films met Robert De Niro bevat. Er zijn 87 records. Voor elk record weten we Jaar (`Year`), Waardering (`Score`) en Titel (`Title`).

::: {.callout-tip} 
Zorg ervoor dat je het bestand opslaat in je projectmap, want daar zoekt R het bestand als je het opent.
:::

Je kunt deze dataset in R importeren met de volgende code:

```{r}
#| eval: false
library(rio) 
deniro_data <- import("deniro.csv") 
```

We kunnen de eerste zes rijen van de dataset bekijken met de functie `head()`:

```{r, include=TRUE}
head(deniro_data)
```

## Tibbles

In [hoofdstuk @sec-data-basics] kwamen we al (*data frames*) tegen. Dataframes zijn een van de 'originele' manieren in R om met gegevens te werken. Maar door de manier waarop ze worden weergegeven, kan het soms moeilijk zijn om gegevens erin te veranderen en de inhoud ervan af te drukken.

Een `tibble`, of `tbl_df`, is een moderne 'versie' van het dataframe. Tibbles hebben een verfijnde afdrukmethode die standaard alleen de eerste 10 rijen toont, en alle kolommen die op het scherm passen. Tibbles zijn daarom gemakkelijker te gebruiken als je grote datasets hebt die complexe objecten bevatten. Hoewel de hier gebruikte dataset niet bijzonder complex is, is het zinvol om aan tibbles te wennen.

Om met tibbles te kunnen werken, moet je tidyverse installeren `install.packages("tidyverse")` (reeds gedaan op universiteitscomputers). We kunnen de tidyverse packages laden door te typen:

```{r, include=TRUE}
library(tidyverse)
```

Om onze dataset om te zetten in een tibble, kunnen we schrijven:

```{r, include=TRUE}
deniro_data <- as_tibble(deniro_data)
```

`deniro_data <- as_tibble(deniro_data)`

:   Met deze code veranderen we het bestaande object `deniro_data` in een tibble, een dataframe met class tbl_df. Als je met een eigen dataset werkt, moet je de naam aanpassen.

Als we nu `deniro_data` openen zien we dat de manier waarop het dataframe wordt weergegeven is veranderd. Merk op dat er inhoudelijk niets is veranderd. Alle oorspronkelijke variabelen en waarden zijn nog steeds hetzelfde. Het is alleen een visuele verandering:

```{r, include=TRUE}
deniro_data 
```

## Het selecteren van variabelen

Zodra we onze dataset hebben geladen, kunnen we variabelen selecteren. Als we bijvoorbeeld de kolommen (variabelen) betreffende het publicatiejaar (`Year`) en de titel van de film (`Title`) willen selecteren, kunnen we schrijven:

```{r, include=TRUE}
deniro_data |> 
  select(Year, Title)
```

`deniro_data |>`

:   Dit deel van de code haalt één of meerdere kolommen uit `deniro_data`. Merk op dat we de native pipe operator (`|>`) gebruiken, zie @sec-data-basics-pipes.

`select(Year, Title)`

:   Hier selecteren we twee kolommen van de tibble, genaamd `Year` en `Title`. Merk op dat we, omwille van de stijl, voorstellen om nieuwe opdrachten in een pipe op de volgende regel te zetten (zie overzicht van week 2)

Er zijn verschillende speciale functies die binnen `select()` gebruikt kunnen worden. Het is mogelijk een functie toe te passen op de kolommen en bijvoorbeeld alleen numerieke kolommen te selecteren:

```{r, include=TRUE}
deniro_data |> 
  select(where(is.numeric))
```

`deniro_data |>`

:   Dit deel van de code haalt één of meerdere kolommen uit `deniro_data`. Merk op dat we de native pipe operator (`|>`) gebruiken, zie @sec-data-basics-pipes.

`select(where(is.numeric))`

:   Hier selecteren we alleen de kolommen in `deniro_data` die numeriek zijn, met behulp van de functie `where` en `is.numeric`.

`select()` kan ook worden gebruikt om kolommen uit een tibble of dataframe te verwijderen. Hiervoor gebruiken we het min-teken:

```{r, include=TRUE}
deniro_data |> 
  select(-Year, -Title)
```

Merk op dat tot dusver geen van de wijzigingen "permanent" is, omdat het resulterende gegevensframe (tibble) niet wordt "gemaakt" (toegewezen aan een object), maar alleen wordt afgedrukt. Je vraagt R de opdracht uit te voeren in de bestaande dataset en het resultaat af te drukken (niet op te slaan). Als je een variabele permanent wilt selecteren (of verwijderen), moet je een nieuw object maken. Dus als je bijvoorbeeld alleen de kolommen (variabelen) Jaar en Filmtitel wilt behouden in een nieuwe versie van de dataset (`new_deniro_data`), dan moet je schrijven:

```{r, include=TRUE}
new_deniro_data <- deniro_data |> 
  select(Year, Title)
```

`new_deniro_data <-`

:   Dit deel van de code maakt een nieuw object genaamd "new_deniro_data".

`deniro_data |> select(Year, Title)`

:   Dit deel van de code haalt één of meerdere kolommen uit een dataset.

Merk op dat je niet altijd een nieuwe dataset hoeft te maken. Als je de bestaande dataset wilt wijzigen, wijs je het resultaat toe aan een object met dezelfde naam:

```{r, include=TRUE}
deniro_data <- deniro_data |> 
  select(Year, Title)
```

::: {.callout-warning} 
Dit zal de bestaande `deniro_data` (zoals deze in het werkgeheugen van R is bewaard) overschrijven met de wijzigingen. Als je terug wilt naar de oorspronkelijke dataset, moet je het bestand opnieuw importeren.
:::

## Casussen filteren

De functie `filter()` wordt gebruikt om de rijen te filteren. Bijvoorbeeld Canadese kiezers die ouder zijn dan 50.

Er zijn een aantal belangrijke functies en operatoren die nuttig zijn bij het samenstellen van de expressies die worden gebruikt om de gegevens te filteren:

-   `==` betekent 'gelijk aan'.

-   `!=` betekent 'niet gelijk aan'.

-   `<` betekent 'kleiner dan'.

-   `>` betekent 'groter dan'.

-   `<=` betekent 'gelijk aan of kleiner dan'.

-   `>=` betekent 'gelijk aan of groter dan'.

-   `&` betekent 'EN'.

-   `|` betekent 'OF'.

-   `!` betekent 'NIET'.

-   `%in%` wordt gebruikt om één van meerdere waarden te selecteren.

Om het gebruik van sommige daarvan te illustreren, gebruiken we de dataset van de Canadian Election Study 2019:

```{r, eval=FALSE}
canada <- import("2019 Canadian Election Study.rds")
```

We zetten het dataframe om in een tibble en selecteren voor de overzichtelijkheid slechts een paar variabelen:

```{r}
canada <- canada |>
  as_tibble() |>  
  select(cps19_gender, cps19_age, cps19_bornin_other)
```

Laten we aannemen dat we willen filteren op één of meer criteria. Voor een *character variable* zouden we schrijven:

```{r, include=TRUE}
canada |>
  filter(cps19_bornin_other == "UNITED STATES")
```

`filter(cps19_bornin_other == "UNITED STATES")`

:   De functie `filter()` wordt gebruikt om een dataframe te filteren, waarbij alle rijen die aan de voorwaarden voldoen worden behouden. Hier vragen we naar respondenten die geboren zijn in de Verenigde Staten.

::: {.callout-tip}
Een fout die mensen vaak maken bij het filteren van *character variables* is dat ze de aanhalingstekens vergeten.
:::

Als we meerdere geboortelanden willen selecteren, kunnen we gebruik maken van `%in%`. Hier selecteren we mensen die geboren zijn in Vietnam of Oekraïne:

```{r, include=TRUE}
canada |> 
  filter(cps19_bornin_other %in% c("vietnam", "ukraine"))  # Spelling has to match how it appears in the dataset
```

`filter(cps19_bornin_other %in% c("vietnam", "ukraine"))`

:   De functie `filter()` wordt gebruikt om een dataframe te filteren, waarbij alle rijen die aan de voorwaarden voldoen worden behouden. In dit geval selecteren we alle respondenten die in Vietnam of Oekaïne zijn geboren. Let op dat je de lijst van opties als vector noteert (met behulp van `c()`).

Voor een numerieke variabele (zoals lengte) gebruiken we de aanhalingstekens niet. Als we bijvoorbeeld respondenten willen selecteren uit de Verenigde Staten van 30 jaar of ouder:

```{r, include=TRUE}
canada |> 
  filter(cps19_bornin_other == "UNITED STATES" & cps19_age >= 30)
```

`filter(cps19_bornin_other == "UNITED STATES" & cps19_age >= 30)`

:   De functie `filter()` wordt gebruikt om een dataframe te filteren, waarbij alle rijen die aan de voorwaarden voldoen worden behouden. Hier vragen we om geboorteland Verenigde Staten en een leeftijd van 30 jaar of ouder.

Als je respondenten wilt filteren die geboren zijn in Vietnam *of* jonger zijn dan 25, gebruik je:

```{r, include=TRUE}
canada |> 
  filter(cps19_bornin_other == "Vietnam" | cps19_age < 25)
```

Je kunt de bovengenoemde uitdrukkingen toepassen om de data te filteren. De "!" operator werkt een beetje anders, omdat hij alle gevallen selecteert die ***niet*** aan een voorwaarde voldoen. Dus, als we bijvoorbeeld alle casussen willen filteren die niet in de Verenigde Staten zijn geboren, zouden we schrijven:

```{r, include=TRUE}
canada |>
  filter(!(cps19_bornin_other == "UNITED STATES"))
```

`filter(!(cps19_bornin_other == "UNITED STATES"))`

:   De functie `filter()` wordt gebruikt om een dataframe te filteren, waarbij alle rijen die aan de voorwaarden voldoen worden behouden. Hier vragen we alleen gevallen te selecteren die NIET in de Verenigde Staten zijn geboren. Merk op dat we een uitroepteken voor de conditie zetten en dat de conditie tussen haakjes staat.

Merk nogmaals op dat geen van de wijzigingen "permanent" is. Je vraagt R gewoon om de opdracht 'tijdelijk' uit te voeren in de bestaande dataset. Als je permanent wilt filteren, moet je een nieuw object maken (of toewijzen aan het huidige object). Dus, bijvoorbeeld, als je bijvoorbeeld een dataset wilt maken met alleen de antwoorden van mensen die hun gender niet als man of vrouw omschrijven:

```{r, include=TRUE}
new_canada <- canada |>
  filter(cps19_gender == "Other (e.g. Trans, non-binary, two-spirit, gender-queer)")
```

`new_canada <-`

:   Dit deel van de code maakt een nieuw object genaamd `new_canada`.

`canada |>`

:   Dit deel van de code neemt `canada` als het begin van onze *pipe*.

`filter(cps19_gender == "Other (e.g. Trans, non-binary, two-spirit, gender-queer)")`

:   Dit deel van de code onderwerpt een dataframe aan de opgegeven voorwaarde.

::: {.callout-tip}
Een fout die mensen vaak maken in filters is het gebruik van slechts één is-gelijk-teken =, waar er twee == zouden moeten staan.
:::

## Variabelen hernoemen

Om de namen van individuele variabelen te veranderen gebruiken we de `rename()` functie. Deze gebruikt de volgorde `nieuwe_naam = oude_naam` om geselecteerde variabelen te hernoemen.

Als we de kolom `cps19_age` uit dataset `canada` willen hernoemen naar `age`, zou je schrijven:

```{r, include=TRUE}
canada |>
  rename(age = cps19_age)
```

Zoals hierboven is opgemerkt, is dit echter geen permanente wijziging. Daarvoor moeten we ervoor zorgen dat het in het bestaande dataframe wordt gewijzigd:

```{r, include=TRUE}
canada <- canada |>
  rename(age = cps19_age)
```

`canada <- canada |>`

:   Dit deel van de code overschrijft het bestaande dataframe `canada`.

`rename(age = cps19_age)`

:   Dit deel van de code hernoemt een variabele met het algemene patroon: `<nieuwe_naam> = <oude_naam>`.


